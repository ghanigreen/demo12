docker run hello-world

docker --version

docker ps

Dockerfile


# Use an official Python runtime as a parent image
FROM python:2.7-slim

# Set the working directory to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
ADD . /app

# Install any needed packages specified in requirements.txt
RUN pip install -r requirements.txt

# Make port 80 available to the world outside this container
EXPOSE 80

# Define environment variable
ENV NAME World

# Run app.py when the container launches
CMD ["python", "app.py"]


requirements.txt

Flask
Redis


app.py

from flask import Flask
from redis import Redis, RedisError
import os
import socket

# Connect to Redis
redis = Redis(host="redis", db=0, socket_connect_timeout=2, socket_timeout=2)

app = Flask(__name__)

@app.route("/")
def hello():
    try:
        visits = redis.incr("counter")
    except RedisError:
        visits = "<i>cannot connect to Redis, counter disabled</i>"

    html = "<h3>Hello {name}!</h3>" \
           "<b>Hostname:</b> {hostname}<br/>" \
           "<b>Visits:</b> {visits}"
    return html.format(name=os.getenv("NAME", "world"), hostname=socket.gethostname(), visits=visits)

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=80)


ls

docker build -t friendlyhello .

docker images
docker image ls


docker run -p 4000:80 friendlyhello   //localhost:4000

curl http://localhost:4000

docker run -d -p 4000:80 friendlyhello

docker container ls

docker container stop 1fa4ab2cf395


docker login

docker tag image username/repository:tag   //docker tag friendlyhello ghanigreen/get-started:part2

docker images


docker push username/repository:tag      //docker push ghanigreen/get-started:part2

docker run -p 4000:80 username/repository:tag   // docker run -p 4000:80 ghanigreen/get-started:part2







